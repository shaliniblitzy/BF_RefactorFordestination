# =============================================================================
# ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# This file provides examples of environment variables for the Python HTTP 
# server project. Copy this file to '.env' and modify values as needed.
#
# Educational Purpose:
# - Demonstrates Python environment variable configuration patterns
# - Shows Flask framework-specific environment settings
# - Provides examples for both native Python and Flask implementations
# - Illustrates cross-platform configuration management
#
# Usage:
# 1. Copy this file: cp .env.example .env
# 2. Modify values in .env file as needed
# 3. Environment variables are loaded automatically by Flask (with python-dotenv)
# 4. Native Python implementation uses os.getenv() to read these values
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Port Configuration
# The HTTP server will bind to this port for incoming connections
# Default: 3000 (matching original Node.js configuration)
# Alternatives: 8000, 8080 for different development scenarios
# Used by: Both native Python and Flask implementations
PORT=3000

# Host Configuration  
# Network interface for server binding
# Default: localhost (127.0.0.1) for local development security
# Alternative: 0.0.0.0 for network-accessible binding (use with caution)
# Used by: Both native Python and Flask implementations
HOST=localhost

# =============================================================================
# FLASK FRAMEWORK CONFIGURATION
# =============================================================================

# Flask Application Module
# Specifies the Python module containing the Flask application
# Required for 'flask run' command execution
# Points to the main application factory or app instance
FLASK_APP=app.py

# Flask Environment Mode
# Controls Flask's behavior in development vs production
# development: Enables debug mode, auto-reloader, detailed error pages
# production: Optimized for performance, minimal error information
# Used by: Flask implementation only
FLASK_ENV=development

# Debug Mode Configuration
# Enables/disables debug features in Flask applications
# True: Hot reloading, detailed error pages, debug toolbar
# False: Production-ready mode with minimal error exposure
# Used by: Flask implementation (native Python doesn't use this)
DEBUG=True

# Flask Development Server Configuration
# Alternative method to set Flask development server port
# Overrides PORT variable specifically for Flask development server
# Used when running 'flask run' command
FLASK_RUN_PORT=3000

# Flask Development Server Host
# Alternative method to set Flask development server host binding
# Overrides HOST variable specifically for Flask development server
# Used when running 'flask run' command  
FLASK_RUN_HOST=localhost

# =============================================================================
# PYTHON RUNTIME CONFIGURATION
# =============================================================================

# Python Path Configuration (Optional)
# Adds current directory to Python module search path
# Useful for relative imports and module discovery
# Uncomment if encountering module import issues
# PYTHONPATH=.

# Python Optimization Level (Optional)
# Controls Python bytecode optimization
# 0: No optimization (default, best for development)
# 1: Basic optimization, removes assert statements
# 2: Advanced optimization, removes docstrings and debug info
# PYTHONOPTIMIZE=0

# Python Unbuffered Output (Optional)
# Forces Python stdout and stderr to be unbuffered
# Useful for real-time log output in containerized environments
# Uncomment for immediate console output visibility
# PYTHONUNBUFFERED=1

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Logging Level Configuration
# Controls verbosity of application logging output
# DEBUG: Detailed debugging information
# INFO: General operational messages
# WARNING: Warning messages only
# ERROR: Error messages only
# Used by: Custom logging implementations in both server types
LOG_LEVEL=DEBUG

# Request Logging Configuration
# Enables/disables HTTP request logging to console
# True: Log all incoming HTTP requests with details
# False: Suppress request logging for cleaner output
# Used by: Both implementations for educational visibility
LOG_REQUESTS=True

# =============================================================================
# EDUCATIONAL EXAMPLES AND ALTERNATIVES
# =============================================================================

# Alternative Port Examples:
# Uncomment and modify PORT variable above to use these alternatives
# PORT=8000    # Common alternative development port
# PORT=8080    # HTTP alternative port, often used in corporate environments
# PORT=5000    # Flask default port (if not specified)

# Alternative Host Examples:
# Uncomment and modify HOST variable above for different binding scenarios
# HOST=0.0.0.0        # Bind to all network interfaces (security consideration)
# HOST=127.0.0.1      # Explicit localhost binding (IPv4)
# HOST=::1            # IPv6 localhost binding

# Production Configuration Example:
# For production deployments, consider these settings:
# FLASK_ENV=production
# DEBUG=False
# LOG_LEVEL=WARNING
# LOG_REQUESTS=False

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Native Python Implementation:
# The native server.py reads these variables using:
# port = int(os.getenv('PORT', 3000))
# host = os.getenv('HOST', 'localhost')
# debug = os.getenv('DEBUG', 'False').lower() == 'true'

# Flask Implementation:
# The Flask app.py automatically loads this file using python-dotenv:
# from dotenv import load_dotenv
# load_dotenv()
# The Flask CLI also respects FLASK_* variables automatically

# Command Line Override Examples:
# Environment variables can be overridden at runtime:
# PORT=8080 python server.py           # Native implementation with custom port
# FLASK_RUN_PORT=8080 flask run        # Flask with custom port
# DEBUG=False python app.py            # Flask in production mode

# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================

# Important Security Notes:
# 1. Never commit actual .env files to version control
# 2. Use localhost binding (127.0.0.1) for development security
# 3. Set DEBUG=False for any network-accessible deployments
# 4. Consider firewall rules when using HOST=0.0.0.0
# 5. Validate environment variable values in your application code

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues and Solutions:
# 
# 1. Port already in use:
#    - Change PORT to alternative value (8000, 8080)
#    - Check for existing processes: netstat -an | grep :3000
#
# 2. Permission denied on port < 1024:
#    - Use ports > 1024 for development
#    - Run with appropriate privileges if needed
#
# 3. Flask not finding app:
#    - Ensure FLASK_APP points to correct Python file
#    - Verify Flask application instance name matches
#
# 4. Environment variables not loading:
#    - Confirm .env file is in project root directory
#    - Check for python-dotenv installation: pip install python-dotenv
#    - Verify load_dotenv() is called before accessing variables